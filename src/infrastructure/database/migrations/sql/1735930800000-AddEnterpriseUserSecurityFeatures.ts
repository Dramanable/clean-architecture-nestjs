/**
 * üîß MIGRATION SQL - Add Enterprise User Security Features
 *
 * Migration SQL qui ajoute des fonctionnalit√©s de s√©curit√© enterprise
 * aux utilisateurs existants avec hashedPassword
 *
 * FONCTIONNALIT√âS:
 * - Colonnes audit trail (last_login_at, failed_login_attempts)
 * - Colonnes s√©curit√© (account_locked_until, password_updated_at)
 * - Index optimis√©s pour performance et s√©curit√©
 * - Contraintes de s√©curit√© enterprise
 *
 * CLEAN ARCHITECTURE COMPLIANCE:
 * - Migration d'infrastructure pure
 * - Respect des principes SOLID
 * - Rollback s√©curis√© complet
 */

import { MigrationInterface, QueryRunner } from 'typeorm';

export class AddEnterpriseUserSecurityFeatures1735930800000
  implements MigrationInterface
{
  name = 'AddEnterpriseUserSecurityFeatures1735930800000';

  public async up(queryRunner: QueryRunner): Promise<void> {
    console.log('üîº Starting Enterprise User Security Features migration...');

    try {
      // 1. üîê Ajouter colonnes de s√©curit√© enterprise
      await queryRunner.query(`
        ALTER TABLE "users" 
        ADD COLUMN "lastLoginAt" TIMESTAMP NULL,
        ADD COLUMN "failedLoginAttempts" INTEGER DEFAULT 0 NOT NULL,
        ADD COLUMN "accountLockedUntil" TIMESTAMP NULL,
        ADD COLUMN "passwordUpdatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
        ADD COLUMN "requiresPasswordChange" BOOLEAN DEFAULT false NOT NULL,
        ADD COLUMN "twoFactorEnabled" BOOLEAN DEFAULT false NOT NULL,
        ADD COLUMN "twoFactorSecret" VARCHAR(255) NULL
      `);

      // 2. üìä Cr√©er index compos√© pour audit et s√©curit√©
      await queryRunner.query(`
        CREATE INDEX "IDX_USER_SECURITY_STATUS" 
        ON "users" ("isActive", "accountLockedUntil", "failedLoginAttempts")
      `);

      // 3. üîç Index pour recherche par derni√®re connexion
      await queryRunner.query(`
        CREATE INDEX "IDX_USER_LAST_LOGIN" 
        ON "users" ("lastLoginAt" DESC) 
        WHERE "lastLoginAt" IS NOT NULL
      `);

      // 4. ‚ö° Index pour les utilisateurs actifs r√©cents (performance)
      await queryRunner.query(`
        CREATE INDEX "IDX_USER_ACTIVE_RECENT" 
        ON "users" ("isActive", "lastLoginAt" DESC, "role") 
        WHERE "isActive" = true
      `);

      // 5. üîê Index pour passwords expirants (s√©curit√©)
      await queryRunner.query(`
        CREATE INDEX "IDX_USER_PASSWORD_EXPIRY" 
        ON "users" ("passwordUpdatedAt", "requiresPasswordChange", "role")
      `);

      // 6. üö® Contrainte de s√©curit√©: Limiter tentatives de connexion
      await queryRunner.query(`
        ALTER TABLE "users" 
        ADD CONSTRAINT "CHK_FAILED_LOGIN_ATTEMPTS" 
        CHECK ("failedLoginAttempts" >= 0 AND "failedLoginAttempts" <= 10)
      `);

      // 7. üìù Contrainte: 2FA secret seulement si 2FA activ√©
      await queryRunner.query(`
        ALTER TABLE "users" 
        ADD CONSTRAINT "CHK_TWO_FACTOR_CONSISTENCY" 
        CHECK (
          ("twoFactorEnabled" = false AND "twoFactorSecret" IS NULL) OR
          ("twoFactorEnabled" = true AND "twoFactorSecret" IS NOT NULL)
        )
      `);

      // 8. üéØ Mise √† jour des utilisateurs existants
      await queryRunner.query(`
        UPDATE "users" 
        SET "passwordUpdatedAt" = "createdAt"
        WHERE "passwordUpdatedAt" IS NULL
      `);

      console.log(
        '‚úÖ Enterprise User Security Features migration completed successfully',
      );
    } catch (error) {
      console.error('‚ùå Migration failed:', error);
      throw error;
    }
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    console.log(
      'üîΩ Rolling back Enterprise User Security Features migration...',
    );

    try {
      // 1. üóëÔ∏è Supprimer les contraintes (ordre inverse de cr√©ation)
      await queryRunner.query(`
        ALTER TABLE "users" DROP CONSTRAINT IF EXISTS "CHK_TWO_FACTOR_CONSISTENCY"
      `);

      await queryRunner.query(`
        ALTER TABLE "users" DROP CONSTRAINT IF EXISTS "CHK_FAILED_LOGIN_ATTEMPTS"
      `);

      // 2. üóëÔ∏è Supprimer les index (ordre inverse de cr√©ation)
      await queryRunner.query(
        `DROP INDEX IF EXISTS "IDX_USER_PASSWORD_EXPIRY"`,
      );
      await queryRunner.query(`DROP INDEX IF EXISTS "IDX_USER_ACTIVE_RECENT"`);
      await queryRunner.query(`DROP INDEX IF EXISTS "IDX_USER_LAST_LOGIN"`);
      await queryRunner.query(
        `DROP INDEX IF EXISTS "IDX_USER_SECURITY_STATUS"`,
      );

      // 3. üóëÔ∏è Supprimer les colonnes (ordre inverse de cr√©ation)
      await queryRunner.query(`
        ALTER TABLE "users" 
        DROP COLUMN IF EXISTS "twoFactorSecret",
        DROP COLUMN IF EXISTS "twoFactorEnabled",
        DROP COLUMN IF EXISTS "requiresPasswordChange",
        DROP COLUMN IF EXISTS "passwordUpdatedAt",
        DROP COLUMN IF EXISTS "accountLockedUntil",
        DROP COLUMN IF EXISTS "failedLoginAttempts",
        DROP COLUMN IF EXISTS "lastLoginAt"
      `);

      console.log(
        '‚è™ Enterprise User Security Features rollback completed successfully',
      );
    } catch (error) {
      console.error('‚ùå Rollback failed:', error);
      throw error;
    }
  }
}
