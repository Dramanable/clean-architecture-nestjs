/**
 * ðŸ”„ User Mapper - Domain â†” ORM
 *
 * Convertit entre l'entitÃ© Domain (pure) et l'entitÃ© ORM (infrastructure)
 * Pattern essentiel pour respecter la Clean Architecture
 */

import { User } from '../../../domain/entities/user.entity';
import { Email } from '../../../domain/value-objects/email.vo';
import { UserOrmEntity } from '../entities/typeorm/user.entity';

export class UserMapper {
  /**
   * ðŸ“¥ ORM Entity â†’ Domain Entity (mÃ©thode d'instance)
   */
  toDomainEntity(ormEntity: UserOrmEntity): User {
    return UserMapper.toDomain(ormEntity);
  }

  /**
   * ðŸ“¤ Domain Entity â†’ ORM Entity (mÃ©thode d'instance)
   */
  toOrmEntity(domainEntity: User): UserOrmEntity {
    return UserMapper.toOrm(domainEntity);
  }

  /**
   * ðŸ“¥ ORM Entity â†’ Domain Entity (mÃ©thode statique)
   * Convertit depuis la base de donnÃ©es vers le domaine
   */
  static toDomain(ormEntity: UserOrmEntity): User {
    // Reconstruction de l'entitÃ© Domain avec toutes ses invariants
    const user = new User(
      new Email(ormEntity.email),
      ormEntity.name,
      ormEntity.role,
    );

    // Reconstitution des mÃ©tadonnÃ©es via les propriÃ©tÃ©s privÃ©es
    (user as any).id = ormEntity.id;
    (user as any).hashedPassword = ormEntity.password;
    (user as any).createdAt = ormEntity.createdAt;
    (user as any).updatedAt = ormEntity.updatedAt;

    return user;
  }

  /**
   * ðŸ“¤ Domain Entity â†’ ORM Entity
   * Convertit depuis le domaine vers la base de donnÃ©es
   */
  static toOrm(domainEntity: User): UserOrmEntity {
    const ormEntity = new UserOrmEntity();

    // Champs principaux
    ormEntity.id = domainEntity.id;
    ormEntity.email = domainEntity.email.value;
    ormEntity.name = domainEntity.name;
    ormEntity.role = domainEntity.role;
    ormEntity.password = domainEntity.hashedPassword || '';

    // MÃ©tadonnÃ©es par dÃ©faut
    ormEntity.isActive = true;
    ormEntity.emailVerified = false;
    ormEntity.loginAttempts = 0;

    // Timestamps - gardÃ©s si ils existent
    if (domainEntity.createdAt) {
      ormEntity.createdAt = domainEntity.createdAt;
    }
    if (domainEntity.updatedAt) {
      ormEntity.updatedAt = domainEntity.updatedAt;
    }

    return ormEntity;
  }

  /**
   * ðŸ”„ Mise Ã  jour d'une entitÃ© ORM existante
   * PrÃ©serve les mÃ©tadonnÃ©es ORM (version, created_at, etc.)
   */
  static updateOrm(
    ormEntity: UserOrmEntity,
    domainEntity: User,
  ): UserOrmEntity {
    // Mise Ã  jour des champs modifiables
    ormEntity.email = domainEntity.email.value;
    ormEntity.name = domainEntity.name;
    ormEntity.role = domainEntity.role;

    // Mise Ã  jour du mot de passe si changÃ©
    if (domainEntity.hashedPassword) {
      ormEntity.password = domainEntity.hashedPassword;
    }

    return ormEntity;
  }

  /**
   * ðŸ“Š Mapper des listes d'entitÃ©s
   */
  static toDomainList(ormEntities: UserOrmEntity[]): User[] {
    return ormEntities.map((ormEntity) => this.toDomain(ormEntity));
  }

  static toOrmList(domainEntities: User[]): UserOrmEntity[] {
    return domainEntities.map((domainEntity) => this.toOrm(domainEntity));
  }
}
