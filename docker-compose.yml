# üöÄ Docker Compose - Mode D√©veloppement
# Configuration optimis√©e pour le d√©veloppement avec hot reload

 

services:
  # PostgreSQL - Base principale pour les utilisateurs
  postgres:
    image: postgres:15-alpine
    container_name: cleanarchi_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: cleanarchi_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - cleanarchi_dev_network

  # MongoDB - Pour les logs et donn√©es non-relationnelles
  mongodb:
    image: mongo:7.0
    container_name: cleanarchi_mongodb_dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: dev_user
      MONGO_INITDB_ROOT_PASSWORD: dev_password123
      MONGO_INITDB_DATABASE: cleanarchi_dev
    ports:
      - "27017:27017"
    volumes:
      - mongodb_dev_data:/data/db
    networks:
      - cleanarchi_dev_network

  # Redis - Pour les sessions et cache
  redis:
    image: redis:7.2-alpine
    container_name: cleanarchi_redis_dev
    restart: unless-stopped
    command: redis-server --requirepass dev_password123 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - cleanarchi_dev_network

  # pgAdmin4 - Interface d'administration PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cleanarchi_pgadmin_dev
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: dev@cleanarchi.com
      PGADMIN_DEFAULT_PASSWORD: dev123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    networks:
      - cleanarchi_dev_network
    depends_on:
      - postgres

  # Mongo Express - Interface d'admin pour MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: cleanarchi_mongo_express_dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: dev_user
      ME_CONFIG_MONGODB_ADMINPASSWORD: dev_password123
      ME_CONFIG_MONGODB_URL: mongodb://dev_user:dev_password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: dev
      ME_CONFIG_BASICAUTH_PASSWORD: dev
    networks:
      - cleanarchi_dev_network
    depends_on:
      - mongodb

  # Redis Commander - Interface d'admin pour Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cleanarchi_redis_commander_dev
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:dev_password123
    networks:
      - cleanarchi_dev_network
    depends_on:
      - redis

  # Application NestJS - Clean Architecture (Development)
  app:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: cleanarchi_app_dev
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
      - "24678:24678"  # VSCode debugger
    environment:
      NODE_ENV: development
      PORT: 3000
      
      # Database Connections
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: dev_user
      DB_PASSWORD: dev_password123
      DB_DATABASE: cleanarchi_dev
      
      # MongoDB Connection
      MONGODB_URL: mongodb://dev_user:dev_password123@mongodb:27017/cleanarchi_dev?authSource=admin
      
      # Redis Connection
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: dev_password123
      
      # JWT Secrets (d√©veloppement uniquement)
      ACCESS_TOKEN_SECRET: dev-access-token-secret-for-development-only-32chars
      REFRESH_TOKEN_SECRET: dev-refresh-token-secret-for-development-only-32chars
      ACCESS_TOKEN_EXPIRATION: 3600
      REFRESH_TOKEN_EXPIRATION_DAYS: 30
      
      # Security (mode d√©veloppement)
      BCRYPT_ROUNDS: 4
      
      # Application
      APP_NAME: "Clean Architecture NestJS (Development)"
      APP_VERSION: "1.0.0-dev"
      
      # Debug & Development
      DEBUG: "*"
      LOG_LEVEL: debug
      
    volumes:
      - .:/app  # Mount du code source pour hot reload
      - /app/node_modules  # Volume anonyme pour √©viter les conflits
      - ./logs:/app/logs
    networks:
      - cleanarchi_dev_network
    depends_on:
      - postgres
      - mongodb
      - redis
    command: ["npx", "nest", "start"]  # D√©marrage direct avec nest
    stdin_open: true  # Permet l'interaction
    tty: true  # Alloue un TTY

volumes:
  postgres_dev_data:
    driver: local
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

networks:
  cleanarchi_dev_network:
    driver: bridge
