export declare const APPLICATION_TOKENS: {
    readonly LOGGER: "Logger";
    readonly I18N_SERVICE: "I18nService";
    readonly CONFIG_SERVICE: "IConfigService";
    readonly EMAIL_SERVICE: "EmailService";
    readonly PASSWORD_SERVICE: "PasswordService";
    readonly PASSWORD_GENERATOR: "PasswordGenerator";
    readonly TOKEN_SERVICE: "TokenService";
    readonly CREATE_USER_USE_CASE: "CreateUserUseCase";
    readonly GET_USER_USE_CASE: "GetUserUseCase";
    readonly UPDATE_USER_USE_CASE: "UpdateUserUseCase";
    readonly DELETE_USER_USE_CASE: "DeleteUserUseCase";
    readonly LOGIN_USE_CASE: "LoginUseCase";
    readonly USER_ONBOARDING_SERVICE: "UserOnboardingApplicationService";
    readonly AUTH_TOKEN_SERVICE: "AuthTokenService";
    readonly AUTH_SERVICE: "AuthService";
    readonly JWT_SERVICE: "JwtService";
};
export declare const DOMAIN_TOKENS: {
    readonly USER_REPOSITORY: "UserRepository";
    readonly REFRESH_TOKEN_REPOSITORY: "RefreshTokenRepository";
    readonly USER_DOMAIN_SERVICE: "UserDomainService";
    readonly PASSWORD_DOMAIN_SERVICE: "PasswordDomainService";
    readonly EMAIL_DOMAIN_SERVICE: "EmailDomainService";
};
export declare const INFRASTRUCTURE_TOKENS: {
    readonly DATABASE_TYPE: "DatabaseType";
    readonly DATABASE_CONNECTION: "DatabaseConnection";
    readonly TYPEORM_CONNECTION: "TypeOrmConnection";
    readonly MONGO_CONNECTION: "MongoConnection";
    readonly TYPEORM_USER_REPOSITORY: "TypeOrmUserRepository";
    readonly MONGO_USER_REPOSITORY: "MongoUserRepository";
    readonly PINO_LOGGER: "PinoLogger";
    readonly CONSOLE_LOGGER: "ConsoleLogger";
    readonly SMTP_EMAIL_SERVICE: "SmtpEmailService";
    readonly BCRYPT_PASSWORD_SERVICE: "BcryptPasswordService";
    readonly JWT_TOKEN_SERVICE: "JwtTokenService";
    readonly USER_MAPPER: "UserMapper";
    readonly DATABASE_MAPPER_FACTORY: "DatabaseMapperFactory";
    readonly APP_CONFIG: "AppConfig";
    readonly DATABASE_CONFIG: "DatabaseConfig";
    readonly LOGGER_CONFIG: "LoggerConfig";
};
export declare const PRESENTATION_TOKENS: {
    readonly USER_CONTROLLER: "UserController";
    readonly AUTH_CONTROLLER: "AuthController";
    readonly HTTP_SERVICE: "HttpService";
    readonly VALIDATION_PIPE: "ValidationPipe";
};
export declare const TOKENS: {
    readonly USER_CONTROLLER: "UserController";
    readonly AUTH_CONTROLLER: "AuthController";
    readonly HTTP_SERVICE: "HttpService";
    readonly VALIDATION_PIPE: "ValidationPipe";
    readonly DATABASE_TYPE: "DatabaseType";
    readonly DATABASE_CONNECTION: "DatabaseConnection";
    readonly TYPEORM_CONNECTION: "TypeOrmConnection";
    readonly MONGO_CONNECTION: "MongoConnection";
    readonly TYPEORM_USER_REPOSITORY: "TypeOrmUserRepository";
    readonly MONGO_USER_REPOSITORY: "MongoUserRepository";
    readonly PINO_LOGGER: "PinoLogger";
    readonly CONSOLE_LOGGER: "ConsoleLogger";
    readonly SMTP_EMAIL_SERVICE: "SmtpEmailService";
    readonly BCRYPT_PASSWORD_SERVICE: "BcryptPasswordService";
    readonly JWT_TOKEN_SERVICE: "JwtTokenService";
    readonly USER_MAPPER: "UserMapper";
    readonly DATABASE_MAPPER_FACTORY: "DatabaseMapperFactory";
    readonly APP_CONFIG: "AppConfig";
    readonly DATABASE_CONFIG: "DatabaseConfig";
    readonly LOGGER_CONFIG: "LoggerConfig";
    readonly USER_REPOSITORY: "UserRepository";
    readonly REFRESH_TOKEN_REPOSITORY: "RefreshTokenRepository";
    readonly USER_DOMAIN_SERVICE: "UserDomainService";
    readonly PASSWORD_DOMAIN_SERVICE: "PasswordDomainService";
    readonly EMAIL_DOMAIN_SERVICE: "EmailDomainService";
    readonly LOGGER: "Logger";
    readonly I18N_SERVICE: "I18nService";
    readonly CONFIG_SERVICE: "IConfigService";
    readonly EMAIL_SERVICE: "EmailService";
    readonly PASSWORD_SERVICE: "PasswordService";
    readonly PASSWORD_GENERATOR: "PasswordGenerator";
    readonly TOKEN_SERVICE: "TokenService";
    readonly CREATE_USER_USE_CASE: "CreateUserUseCase";
    readonly GET_USER_USE_CASE: "GetUserUseCase";
    readonly UPDATE_USER_USE_CASE: "UpdateUserUseCase";
    readonly DELETE_USER_USE_CASE: "DeleteUserUseCase";
    readonly LOGIN_USE_CASE: "LoginUseCase";
    readonly USER_ONBOARDING_SERVICE: "UserOnboardingApplicationService";
    readonly AUTH_TOKEN_SERVICE: "AuthTokenService";
    readonly AUTH_SERVICE: "AuthService";
    readonly JWT_SERVICE: "JwtService";
};
export type ApplicationToken = (typeof APPLICATION_TOKENS)[keyof typeof APPLICATION_TOKENS];
export type DomainToken = (typeof DOMAIN_TOKENS)[keyof typeof DOMAIN_TOKENS];
export type InfrastructureToken = (typeof INFRASTRUCTURE_TOKENS)[keyof typeof INFRASTRUCTURE_TOKENS];
export type PresentationToken = (typeof PRESENTATION_TOKENS)[keyof typeof PRESENTATION_TOKENS];
export type Token = (typeof TOKENS)[keyof typeof TOKENS];
export declare function isValidToken(token: string): token is Token;
export declare function getTokensByLayer(layer: 'application' | 'domain' | 'infrastructure' | 'presentation'): {
    readonly LOGGER: "Logger";
    readonly I18N_SERVICE: "I18nService";
    readonly CONFIG_SERVICE: "IConfigService";
    readonly EMAIL_SERVICE: "EmailService";
    readonly PASSWORD_SERVICE: "PasswordService";
    readonly PASSWORD_GENERATOR: "PasswordGenerator";
    readonly TOKEN_SERVICE: "TokenService";
    readonly CREATE_USER_USE_CASE: "CreateUserUseCase";
    readonly GET_USER_USE_CASE: "GetUserUseCase";
    readonly UPDATE_USER_USE_CASE: "UpdateUserUseCase";
    readonly DELETE_USER_USE_CASE: "DeleteUserUseCase";
    readonly LOGIN_USE_CASE: "LoginUseCase";
    readonly USER_ONBOARDING_SERVICE: "UserOnboardingApplicationService";
    readonly AUTH_TOKEN_SERVICE: "AuthTokenService";
    readonly AUTH_SERVICE: "AuthService";
    readonly JWT_SERVICE: "JwtService";
} | {
    readonly USER_REPOSITORY: "UserRepository";
    readonly REFRESH_TOKEN_REPOSITORY: "RefreshTokenRepository";
    readonly USER_DOMAIN_SERVICE: "UserDomainService";
    readonly PASSWORD_DOMAIN_SERVICE: "PasswordDomainService";
    readonly EMAIL_DOMAIN_SERVICE: "EmailDomainService";
} | {
    readonly DATABASE_TYPE: "DatabaseType";
    readonly DATABASE_CONNECTION: "DatabaseConnection";
    readonly TYPEORM_CONNECTION: "TypeOrmConnection";
    readonly MONGO_CONNECTION: "MongoConnection";
    readonly TYPEORM_USER_REPOSITORY: "TypeOrmUserRepository";
    readonly MONGO_USER_REPOSITORY: "MongoUserRepository";
    readonly PINO_LOGGER: "PinoLogger";
    readonly CONSOLE_LOGGER: "ConsoleLogger";
    readonly SMTP_EMAIL_SERVICE: "SmtpEmailService";
    readonly BCRYPT_PASSWORD_SERVICE: "BcryptPasswordService";
    readonly JWT_TOKEN_SERVICE: "JwtTokenService";
    readonly USER_MAPPER: "UserMapper";
    readonly DATABASE_MAPPER_FACTORY: "DatabaseMapperFactory";
    readonly APP_CONFIG: "AppConfig";
    readonly DATABASE_CONFIG: "DatabaseConfig";
    readonly LOGGER_CONFIG: "LoggerConfig";
} | {
    readonly USER_CONTROLLER: "UserController";
    readonly AUTH_CONTROLLER: "AuthController";
    readonly HTTP_SERVICE: "HttpService";
    readonly VALIDATION_PIPE: "ValidationPipe";
};
