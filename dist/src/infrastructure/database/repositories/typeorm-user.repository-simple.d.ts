import { Repository } from 'typeorm';
import type { I18nService } from '../../../application/ports/i18n.port';
import type { Logger } from '../../../application/ports/logger.port';
import { User } from '../../../domain/entities/user.entity';
import { UserRepository } from '../../../domain/repositories/user.repository';
import { Email } from '../../../domain/value-objects/email.vo';
import { UserRole } from '../../../shared/enums/user-role.enum';
import { PaginatedResult } from '../../../shared/types/pagination.types';
import { UserQueryParams } from '../../../shared/types/user-query.types';
import { UserOrmEntity } from '../entities/typeorm/user.entity';
import { UserMapper } from '../mappers/typeorm-user.mapper';
export declare class TypeOrmUserRepository implements UserRepository {
    private readonly userOrmRepository;
    private readonly userMapper;
    private readonly logger;
    private readonly i18n;
    constructor(userOrmRepository: Repository<UserOrmEntity>, userMapper: UserMapper, logger: Logger, i18n: I18nService);
    save(user: User): Promise<User>;
    findById(id: string): Promise<User | null>;
    findByEmail(email: Email): Promise<User | null>;
    findAll(params?: UserQueryParams): Promise<PaginatedResult<User>>;
    search(params: UserQueryParams): Promise<PaginatedResult<User>>;
    findByRole(role: UserRole, params?: UserQueryParams): Promise<PaginatedResult<User>>;
    update(user: User): Promise<User>;
    delete(id: string): Promise<void>;
    emailExists(email: Email): Promise<boolean>;
    countSuperAdmins(): Promise<number>;
    count(): Promise<number>;
    countWithFilters(params: UserQueryParams): Promise<number>;
    updateBatch(users: User[]): Promise<User[]>;
    deleteBatch(ids: string[]): Promise<void>;
    export(params?: UserQueryParams): Promise<User[]>;
}
